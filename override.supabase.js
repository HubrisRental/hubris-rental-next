// Hubris Rental – Supabase Overrides (staging)
// Load order requirement: include this AFTER your original script.js
// Requires: <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
(function () {
  const cfg = window.HUBRIS_SUPABASE || {};
  if (!cfg.url || !cfg.anonKey) {
    console.error("Supabase config missing. Define window.HUBRIS_SUPABASE = { url, anonKey } before this file.");
    return;
  }
  const supa = window.supabase.createClient(cfg.url, cfg.anonKey);

  // Helpers
  async function ensureAuth() {
    const { data: session } = await supa.auth.getSession();
    if (session && session.session) return session.session;
    // Simple, temporary login prompt for staging.
    const email = localStorage.getItem('hubris_email') || prompt("Email (Supabase user):");
    const password = localStorage.getItem('hubris_pw') || prompt("Password:");
    if (!email || !password) throw new Error("Login annullato");
    const { data, error } = await supa.auth.signInWithPassword({ email, password });
    if (error) throw error;
    localStorage.setItem('hubris_email', email);
    localStorage.setItem('hubris_pw', password);
    try { if (window.showNotification) showNotification("Login effettuato", "success"); } catch(e){}
    return data.session;
  }

  // ---------- EQUIPMENT (replacement for loadDatabaseFromSheets) ----------
  window.loadDatabaseFromSheets = async function() {
    await ensureAuth();
    const { data, error } = await supa.from('equipment').select('*').order('category', { ascending: true }).order('name',{ascending:true});
    if (error) {
      console.error(error);
      if (window.showNotification) showNotification("Errore caricamento attrezzature", "error");
      return;
    }
    // Transform rows into the existing equipmentDatabase structure
    window.equipmentDatabase = {};
    for (const row of data) {
      if (!window.equipmentDatabase[row.category]) window.equipmentDatabase[row.category] = {};
      window.equipmentDatabase[row.category][row.name] = {
        price1: Number(row.price1 || 0),
        price3: Number(row.price3 || 0),
        price7: Number(row.price7 || 0),
        insurance: Number(row.insurance || 0),
        kit: row.kit || "",
        serial: row.serial || ""
      };
    }
    try {
      if (window.renderDatabase) renderDatabase(window.equipmentDatabase);
      if (window.updateSyncTime) updateSyncTime();
      if (window.showNotification) showNotification("Database attrezzature (Supabase) aggiornato", "success");
    } catch(e){ console.warn(e); }
  }

  // ---------- QUOTES helpers ----------
  function mapQuoteHeadToDb(quote) {
    return {
      number: quote.number || null, // will be auto-generated if null
      year: quote.year || null,
      status: quote.status || 'draft',
      cliente: quote.cliente || null,
      cliente_piva: quote.clientePiva || null,
      cliente_via: quote.clienteVia || null,
      cliente_pec: quote.clientePec || null,
      codice_univoco: quote.codiceUnivoco || null,
      contatti: quote.contatti || null,
      carico: quote.carico || null,
      scarico: quote.scarico || null,
      durata: quote.durata || null,
      sconto: quote.sconto || 0,
      crossed_subtotal: quote.crossedSubtotal || null,
      show_crossed_subtotal: !!quote.showCrossedSubtotal,
      total: quote.total || 0,
      version: quote.version || 1
    };
  }

  function mapItemsToDb(quote) {
    const items = Array.isArray(quote.equipment) ? quote.equipment : [];
    return items.map(it => ({
      category: it.category || null,
      equipment: it.equipment || null,
      is_service: !!it.isService,
      quantity: it.quantity || 1,
      price: it.price || 0,
      kit: it.kit || null,
      notes: it.notes || null
    }));
  }

  async function insertItems(quoteId, items) {
    if (!items.length) return;
    const payload = items.map(i => ({ ...i, quote_id: quoteId }));
    const { error } = await supa.from('quote_items').insert(payload);
    if (error) throw error;
  }

  // ---------- saveQuoteToGitHub (OVERRIDE → Supabase) ----------
  window.saveQuoteToGitHub = async function(quote) {
    await ensureAuth();
    try {
      if (!quote) throw new Error("Nessun preventivo da salvare");
      const head = mapQuoteHeadToDb(quote);
      if (!quote.id) {
        // INSERT
        const { data, error } = await supa.from('quotes').insert([head]).select().single();
        if (error) throw error;
        const newId = data.id;
        await insertItems(newId, mapItemsToDb(quote));
        quote.id = newId;
        quote.number = data.number; // auto-generated by DB trigger
        quote.version = data.version;
        try { if (window.showNotification) showNotification(`Salvato come ${quote.number}`, "success"); } catch(e){}
      } else {
        // UPDATE with optimistic concurrency
        const oldVersion = quote.version || 1;
        const { data, error } = await supa.from('quotes')
          .update(mapQuoteHeadToDb(quote))
          .eq('id', quote.id)
          .eq('version', oldVersion)
          .select()
          .single();
        if (error) {
          // Handle conflict (no rows updated)
          if (window.showNotification) showNotification("Conflitto: il preventivo è stato aggiornato altrove. Ricarica.", "warning");
          throw error;
        }
        // Replace items (simple & safe for now)
        await supa.from('quote_items').delete().eq('quote_id', quote.id);
        await insertItems(quote.id, mapItemsToDb(quote));
        quote.version = data.version; // will be same until we add version+1 on server; for now fine
        try { if (window.showNotification) showNotification(`Aggiornato ${quote.number}`, "success"); } catch(e){}
      }
      // refresh local list
      if (window.renderSavedQuotes) await window.loadQuotesFromGitHub();
    } catch (e) {
      console.error(e);
      if (window.showNotification) showNotification("Errore salvataggio (Supabase)", "error");
    }
  }

  // ---------- loadQuotesFromGitHub (OVERRIDE → Supabase) ----------
  window.loadQuotesFromGitHub = async function() {
    await ensureAuth();
    const { data, error } = await supa.from('quotes')
      .select('id, number, status, cliente, carico, scarico, total, updated_at')
      .order('updated_at', { ascending: false });
    if (error) {
      console.error(error);
      if (window.showNotification) showNotification("Errore carico preventivi (Supabase)", "error");
      return;
    }
    window.savedQuotes = data || [];
    try { if (window.renderSavedQuotes) renderSavedQuotes(); } catch(e){}
  }

  // ---------- loadQuoteById (OVERRIDE → Supabase) ----------
  window.loadQuoteById = async function(quoteId) {
    await ensureAuth();
    const { data: head, error: e1 } = await supa.from('quotes').select('*').eq('id', quoteId).single();
    if (e1) { console.error(e1); if (window.showNotification) showNotification("Errore apertura preventivo", "error"); return; }
    const { data: items, error: e2 } = await supa.from('quote_items').select('*').eq('quote_id', quoteId).order('created_at',{ascending:true});
    if (e2) { console.error(e2); if (window.showNotification) showNotification("Errore righe preventivo", "error"); return; }

    // Map back to your UI's quote object
    const q = {
      id: head.id,
      number: head.number,
      year: head.year,
      status: head.status,
      cliente: head.cliente,
      clientePiva: head.cliente_piva,
      clienteVia: head.cliente_via,
      clientePec: head.cliente_pec,
      codiceUnivoco: head.codice_univoco,
      contatti: head.contatti,
      carico: head.carico,
      scarico: head.scarico,
      durata: head.durata,
      sconto: Number(head.sconto || 0),
      crossedSubtotal: head.crossed_subtotal,
      showCrossedSubtotal: !!head.show_crossed_subtotal,
      total: Number(head.total || 0),
      version: head.version || 1,
      equipment: items.map(it => ({
        category: it.category,
        equipment: it.equipment,
        isService: !!it.is_service,
        quantity: it.quantity,
        price: Number(it.price || 0),
        kit: it.kit || "",
        notes: it.notes || ""
      }))
    };
    // Push into UI (reuse your existing fill logic if present)
    try {
      if (window.populateQuoteForm) {
        populateQuoteForm(q);
      } else {
        // Fallback: set globals commonly used
        window.currentQuoteId = q.id;
      }
      if (window.showNotification) showNotification(`Aperto ${q.number}`, "info");
    } catch(e){ console.warn(e); }
    return q;
  }

  // ---------- deleteQuote (optional override) ----------
  window.deleteQuote = async function(quoteId) {
    await ensureAuth();
    await supa.from('quote_items').delete().eq('quote_id', quoteId);
    await supa.from('quotes').delete().eq('id', quoteId);
    if (window.showNotification) showNotification("Preventivo eliminato", "success");
    await window.loadQuotesFromGitHub();
  }

  // Initial autoload (optional – mimic your old startup flow)
  // You can comment these if your existing init handles it.
  // window.addEventListener('load', async () => {
  //   await ensureAuth();
  //   await window.loadQuotesFromGitHub();
  //   await window.loadDatabaseFromSheets();
  // });
})();